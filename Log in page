import React, { useState } from 'react';
import { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signInWithPopup, GoogleAuthProvider, FacebookAuthProvider } from 'firebase/auth';
import { getFirestore, doc, setDoc, getDoc } from 'firebase/firestore';

export default function AuthPage() {
  const [isSignUp, setIsSignUp] = useState(false);
  const [form, setForm] = useState({
    email: '',
    password: '',
    name: '',
    lastName: '',
    location: '',
    phone: ''
  });
  const auth = getAuth();
  const db = getFirestore();

  const handleChange = (e) => setForm({ ...form, [e.target.name]: e.target.value });

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (isSignUp) {
        const userCredential = await createUserWithEmailAndPassword(auth, form.email, form.password);
        // Save additional info to Firestore
        await setDoc(doc(db, "users", userCredential.user.uid), {
          name: form.name,
          lastName: form.lastName,
          location: form.location,
          phone: form.phone,
          email: form.email
        });
        alert('Sign up successful!');
      } else {
        await signInWithEmailAndPassword(auth, form.email, form.password);
        alert('Sign in successful!');
      }
    } catch (err) {
      alert(err.message);
    }
  };

  const handleSocial = async (provider) => {
    try {
      const result = await signInWithPopup(auth, provider);
      const user = result.user;
      const userDoc = await getDoc(doc(db, "users", user.uid));
      if (!userDoc.exists()) {
        // Prompt user to complete profile info if new social login
        await setDoc(doc(db, "users", user.uid), {
          name: user.displayName || '',
          lastName: '',
          location: '',
          phone: '',
          email: user.email
        });
        alert('Signed in with social account. Please complete your profile.');
      } else {
        alert('Signed in with social account!');
      }
    } catch (err) {
      alert(err.message);
    }
  };

  return (
    <div style={{ maxWidth: 350, margin: "auto" }}>
      <div style={{ display: "flex", justifyContent: "center", marginBottom: 20 }}>
        <button
          onClick={() => setIsSignUp(false)}
          style={{ background: !isSignUp ? "#eee" : "#fff", marginRight: 5 }}
        >Sign In</button>
        <button
          onClick={() => setIsSignUp(true)}
          style={{ background: isSignUp ? "#eee" : "#fff" }}
        >Sign Up</button>
      </div>
      <form onSubmit={handleSubmit}>
        {isSignUp && (
          <>
            <input name="name" placeholder="First Name" onChange={handleChange} value={form.name} required /><br />
            <input name="lastName" placeholder="Last Name" onChange={handleChange} value={form.lastName} required /><br />
            <input name="location" placeholder="Location" onChange={handleChange} value={form.location} required /><br />
            <input name="phone" placeholder="Phone" onChange={handleChange} value={form.phone} required /><br />
          </>
        )}
        <input
          name="email"
          type="email"
          placeholder="Email"
          onChange={handleChange}
          value={form.email}
          required
        /><br />
        <input
          name="password"
          type="password"
          placeholder="Password"
          onChange={handleChange}
          value={form.password}
          required
        /><br />
        <button type="submit" style={{ width: "100%", marginTop: 10 }}>
          {isSignUp ? 'Sign Up' : 'Sign In'}
        </button>
      </form>
      <div style={{ textAlign: "center", marginTop: 20 }}>
        <p>OR</p>
        <button
          onClick={() => handleSocial(new GoogleAuthProvider())}
          style={{ width: "100%", marginBottom: 10 }}
        >Continue with Google</button>
        <button
          onClick={() => handleSocial(new FacebookAuthProvider())}
          style={{ width: "100%" }}
        >Continue with Facebook</button>
      </div>
    </div>
  );
}
